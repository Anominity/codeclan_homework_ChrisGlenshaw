---
title: "R Notebook"
output: html_notebook
---

# Control Flow

## "if" Statements

### Some examples
```{r}
if (10 < 15){
  print("Yes")
}
```
```{r}
if (5 %in% c(1, 4, 8)) {
  print("Yes")
}
```

```{r}
if (5 != 3){
  print("Yes")
}
```
```{r}
x <- 8
y <- 7

if (x > y){
  print("Yes")
}
```

### Task
Write an if statement that prints ‘Yes that divides by 2’ if a number x is divisible by 2 (hint: use %% 2 == 0 as your expression), try it out for different values of x.
```{r}
x <- 4

if (x %% 2 == 0){
  print("Yes that divides by 2")
}
```



### Nested if statements
```{r}
if (10 != 5){
  if (3 > 1){
    print("Hello!")
  }
  print("Goodbye!")
}

```

```{r}
if (10 != 5){
  if(2 <= 0){
    print("Hello!")
  }
  print("Goodbye!")
}
```
### Task
1. x is 10 and y is 3.
2. x is 10 and y is 2.
3. x is 2 and y is 10.

```{r}
x <- 10
y <- 3

if (x > y) {
  print("Start of outer if block") #Prints

  if (x %% y == 0) {
    print("Inner if block 1") # Does not print
  }

  if (y %in% c(1:5)) {
    print("Inner if block 2") # Prints
  }

  print("End of outer if block") # Prints
}

print("After if statement") # Prints
```

### if_else statements

```{r}
if (4 > 5){
  print("Yes")
} else {
  print("No")
}
```

```{r}
if (3 %in% 4:6){
  print("Yes")
} else {
  print("No")
}
```

### Task

```{r}
x <- 5

if (x %% 2 == 0){
  print("Yes that divides by 2")
} else {
  print("No that does not divide by 2")
}
```



## Loops
A sequence of code statements until either a certain number of iterations have been completed (For loops), or until a logical condition has been satisfied (While loops)

### "for" Loops

```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

for (day in weekdays) {
  phrase <- paste("The day is", day)
  print(phrase)
}

```

####Task

```{r}
print(1)
print(2)
print(3)
print(4)
print(5)

test_loop <- (1:5)

for (num in test_loop){
  print(num)
}
```



### "while" Loops

```{r}
current_value <- 1
stop_value <- 10

while (current_value < stop_value) {
  current_value <- current_value + 1
  print(current_value)
}
```

#### Alternate "while" loops

```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
 

for (i in 1:length(weekdays)) { # the loop index differs as it reads the start and end number and loops through the numbers in between
    phrase <- paste("The day is", weekdays[i])
    print(phrase)
}

seq(1, length(weekdays), 2)
```

```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

for (number in 1:length(weekdays)) {
    weekdays[number] <- paste0(weekdays[number], "s") 
} 

weekdays

```


### Nested Loops

```{r}
my_matrix <- replicate(5, rnorm(5))

```

```{r}
num_rows <- dim(my_matrix)[1]
num_cols <- dim(my_matrix)[2]


for (row_index in 1:num_rows) {
  for (col_index in 1:num_cols){
    print(my_matrix[row_index, col_index])
  }
}
```

#### Task

Run the code below to create an empty 5×5
Check that the matrix is empty.

```{r}
product_matrix <- matrix(nrow = 5, ncol = 5)
product_matrix
```

Now we’re going to fill product_matrix in the following way: each entry should be the product of the row index and position index at which the entry occurs. For example, the entry on the third row, fourth column, should be 3×4=12
3×4=12.

```{r}

product_matrix <- matrix(nrow = 5, ncol = 5)
for (row_num in 1:dim(product_matrix)[1]){
  for (col_num in 1:dim(product_matrix)[2]){
    product_matrix[row_num, col_num] <- row_num * col_num
  }
}
product_matrix


num_rows <- dim(product_matrix)[1]
num_cols <- dim(product_matrix)[2]

for (row_index in 1:num_rows) {
  for (col_index in 1:num_cols){
    print(product_matrix[row_index, col_index])
  }
}
```


Get the matrix dimensions programatically (so that we could in the future apply this code to any size of matrix with minimal changes).

Hint: you can use the code above as a guide, although we won’t be printing out the matrix entries as we go. Instead, check your code by printing out the whole matrix at the end: just run the single statement product_matrix to do this



